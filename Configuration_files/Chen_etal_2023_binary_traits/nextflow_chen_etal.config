/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
PIPELINE NEXTFLOW CONFIGURATION PARAMETERS

Replication of Chen et al 2023: https://pubmed.ncbi.nlm.nih.gov/39180217/
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/
params {
// Input VCF file for annotations
annotation_vcf = "./ukb_merged_1-22_sitesonly.vcf"

// Input Regenie files for ExWAS
step2_exwas_genetic = "./ukb_merged_1-22"

// exwas file type
// // accepted values are pgen, bgen, bfiles (the same flags that Regenie takes)
step2_exwas_genetic_file_type = "pgen"


// specify the output directory of the pipeline
// it is created if does not exist
outdir = "./Chen_etal_binary_application_notes_2025"

// configuration file
config_file = "./proj_config.yml"

trace_report_suffix = "exwas_pipeline_trace"

conda_env_file="./exwas_pipeline_environment.yml"

vep_apptainer_img = "./exwas_pipeline_vep105_apptainer.def"
}


/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
BELOW SECTIONS ARE DEFAULT CONFIGURATIONS FOR PIPELINE EXECUTION
    e.g., SLURM walltime, memory settings, etc
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*/

// runtime parameters of output structures and other constants
outputDir = "${params.outdir}/results"
trace.overwrite = true
report.overwrite = true
timeline.overwrite = true
dag.overwrite = true

profiles {
    debug {
        dumpHashes              = true
        process.beforeScript    = 'echo $HOSTNAME'
        cleanup                 = false
        nextflow.enable.configProcessNamesValidation = true
    }
    conda {
        conda.enabled           = true
        process.conda = "${params.conda_env_file}"
    }
    mamba {
        conda.enabled           = true
        conda.useMamba          = true
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    docker {
        docker.enabled          = true
        conda.enabled           = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
        docker.runOptions       = '-u $(id -u):$(id -g)'
    }
    arm {
        docker.runOptions       = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }
    singularity {
        singularity.enabled     = true
        singularity.autoMounts  = true
        conda.enabled           = false
        docker.enabled          = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    podman {
        podman.enabled          = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        shifter.enabled         = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    shifter {
        shifter.enabled         = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        charliecloud.enabled    = false
        apptainer.enabled       = false
    }
    charliecloud {
        charliecloud.enabled    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        apptainer.enabled       = false
    }
    apptainer {
        apptainer.enabled       = true
        apptainer.autoMounts    = true
        conda.enabled           = false
        docker.enabled          = false
        singularity.enabled     = false
        podman.enabled          = false
        shifter.enabled         = false
        charliecloud.enabled    = false
    }
    wave {
        apptainer.ociAutoPull   = true
        singularity.ociAutoPull = true
        wave.enabled            = true
        wave.freeze             = true
        wave.strategy           = 'conda,container'
    }
    gitpod {
        executor.name           = 'local'
        executor.cpus           = 4
        executor.memory         = 8.GB
        process {
            resourceLimits = [
                memory: 8.GB,
                cpus  : 4,
                time  : 1.h
            ]
        }
    }
    test      { includeConfig 'conf/test.config'      }
    test_full { includeConfig 'conf/test_full.config' }
    standard {
        process.executor = 'local'
        process.conda = "${params.conda_env_file}"
        conda.enabled = true
    }
    slurm {
        max_memory=120.GB
        max_cpu=10
        max_time='72:00:00' 
        executor.perCpuMemAllocation = true
        process.executor = 'slurm'
        executor.submitRateLimit = "5/1sec"
        jobName = {
        task.name.replace("[", "(").replace("]", ")").replace(" ", "_")
        }
    }
}

process {
    withLabel: "super_big_memory"{
        cpus = 5
        memory = 64.GB
    }
    withLabel:"big_memory" {
        cpus = 5
        memory = 32.GB
    }
    withLabel:"light" {
        cpus = 1
        memory = 15.GB
    }
    withLabel:"super_long"{
        time="72:00:00"
    }
    withLabel:"long" {
        time="24:00:00"
    }
    withLabel:"medium" {
        time="12:00:00"
    }
    withLabel:"short" {
        time="1:00:00"
    }
    withLabel:"instant" {
        time="00:30:00"
    }
}

// Set bash options
process.shell = [
    "bash",
    "-C",         // No clobber - prevent output redirection from overwriting files.
    "-e",         // Exit if a tool returns a non-zero status/exit code
    "-u",         // Treat unset variables and parameters as an error
    "-o",         // Returns the status of the last command to exit..
    "pipefail"    //   ..with a non-zero status or zero if all successfully execute
]

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_execution_information/execution_timeline_${params.trace_report_suffix}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_execution_information/execution_report_${params.trace_report_suffix}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_execution_information/execution_trace_${params.trace_report_suffix}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_execution_information/pipeline_dag_${params.trace_report_suffix}.html"
}

manifest {
    name            = 'richardslab/ExWAS_pipeline'
    author          = """Kevin Liang, Ethan Kreuzer, Yann Ilboudo, Yiheng Chen, J. Brent richards, Guillaume Butler-Laporte""" // The author field is deprecated from Nextflow version 24.10.0, use contributors instead
    homePage        = 'https://github.com/richardslab'
    description     = """ExWAS gene burden testing pipeline"""
    mainScript      = 'main.nf'
    defaultBranch   = 'main'
    version         = '1.0.0dev'
}