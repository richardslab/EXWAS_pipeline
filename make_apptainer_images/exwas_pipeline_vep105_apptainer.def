BootStrap: docker
From: mambaorg/micromamba:latest


%arguments
	vep_version=105.0

# these are executed when the image is being built
# specify bash shell
%post -c /bin/bash

	# this is set at build time for use, but to make it available when image start, have to export to environment
	export VERSION={{ vep_version }}
	echo "export VERSION=${VERSION}" >> $APPTAINER_ENVIRONMENT


	# set up working directory for VEP installation
	wdir="${MAMBA_ROOT_PREFIX}/VEP_${VERSION}"
	mkdir $wdir
	cd $wdir


	# install git
	apt-get update && \
	apt-get install git -y && \
  apt-get clean

	# install vep via micromamba into base
	micromamba install --prefix $MAMBA_ROOT_PREFIX -y -c conda-forge -c bioconda -c defaults ensembl-vep=$VERSION

	# install perl modules into base
	micromamba install -y --prefix $MAMBA_ROOT_PREFIX -c bioconda -c conda-forge perl-bio-bigfile perl-dbd-sqlite perl-list-moreutils samtools

	# Run this in base clone loftee GRCh38
	# # the micromamba run part is the 'SHELL []' bit in docker file
	micromamba run --prefix $MAMBA_ROOT_PREFIX /bin/bash -c "git clone -b grch38 https://github.com/konradjk/loftee.git"


	# export environment variables
	export VEP_SHARE=$MAMBA_ROOT_PREFIX/share/ensembl-vep-$VERSION-*
	echo "export VEP_SHARE=${MAMBA_ROOT_PREFIX}/share/ensembl-vep-${VERSION}-*" >> $APPTAINER_ENVIRONMENT

	# removed uneeded modules
	rm $VEP_SHARE/TissueExpression.pm $VEP_SHARE/ancestral.pm $VEP_SHARE/context.pm $VEP_SHARE/de_novo_donor.pl $VEP_SHARE/extended_splice.pl $VEP_SHARE/gerp_dist.pl $VEP_SHARE/loftee_splice_utils.pl $VEP_SHARE/splice_site_scan.pl $VEP_SHARE/svm.pl $VEP_SHARE/utr_splice.pl 

	# copy loftee to VEP_SHARE and delete directory
	cp -r loftee/* $VEP_SHARE && rm -rf loftee

	export PERL5LIB=/:$MAMBA_ROOT_PREFIX/share/ensembl-vep/
	echo "export PERL5LIB=/:${MAMBA_ROOT_PREFIX}/share/ensembl-vep/" >> $APPTAINER_ENVIRONMENT

	export export LOFTEE_PLUGIN_PATH=/:$MAMBA_ROOT_PREFIX/share/ensembl-vep/
	echo "export LOFTEE_PLUGIN_PATH=/:${MAMBA_ROOT_PREFIX}/share/ensembl-vep/" >> $APPTAINER_ENVIRONMENT


	# run vep_install in base
	# # the links is so that vep libraries are linked properly according to instruction.
	# # otherwise have to add the ensembl-vep-$VERSION* to PERL5LIB.
	micromamba run --prefix $MAMBA_ROOT_PREFIX /bin/bash -c "vep_install --AUTO a --NO_UPDATE --NO_HTSLIB --DESTDIR ${MAMBA_ROOT_PREFIX}/share/ensembl-vep-${VERSION}* && ln -fs ${MAMBA_ROOT_PREFIX}/share/ensembl-vep-${VERSION}* ${MAMBA_ROOT_PREFIX}/share/ensembl-vep"

# this defines what happens when doing
# apptainer run -C apptainer_pkg "<options>"
%runscript
	echo "this is apptainer image for vep ${VERSION}"
	echo "VEP is installed in ${VEP_SHARE}"
	echo "LOFTEE plugin path ${LOFTEE_PLUGIN_PATH}"


	vep_cmd="micromamba run --prefix $MAMBA_ROOT_PREFIX /bin/bash -c \"$@\""
	echo $vep_cmd
	# this would be similar to the CMD or ENTRYPOINT of dockerfile
	micromamba run --prefix $MAMBA_ROOT_PREFIX /bin/bash -c "$@"



%labels
	Author: Kevin Liang
	Version: 1.0
	Description: "modified version of monsieurbl/vep_pipeline"

%help
	This is an apptainer based on monsieurbl/vep_pipeline:v1 available on dockerhub
	
	To use this image to run commands using the apptainer environment do:
		apptainer run -C vep_apptainer "$@"
	e.g., to see VEP installation directory
		apptainer run -C vep_apptainer "echo \$VEP_SHARE"
	bind appropriate host FS with apptainer environment using -B command to read/write files, such as installation of cache
	e.g., install dbNFSP into ~/dir
		apptainer run -C -B ~/dir:/tmp vep_apptainer "vep_install -a p --PLUGINS dbNFSP --CACHE_VERSION 105 --PLUGINSDIR /tmp"
	

